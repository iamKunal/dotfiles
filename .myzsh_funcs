# vim: syntax=zsh:


function isLinux() {
  [[ $(uname) == 'Linux' ]];
}

function isMac() {
  [[ $(uname) == 'Darwin' ]];
}

function daru(){
  /home/linuxbrew/.linuxbrew/bin/$1 ${@:2}
}

## LINUX
# function download(){
#   URL=$( xclip -selection c -o )
#   #curl "$URL" -o /dev/null 2> /dev/null 
#   if [ $? -eq 0 ]; then
#     aria2c -x16 "$URL" --seed-time=0 $@
#   else
#     print -P "%F{red}Not a valid URL!%f"
#     return 1
#  fi;
# }

function download(){
  URL=$( pbpaste )
  #curl "$URL" -o /dev/null 2> /dev/null 
  if [ $? -eq 0 ]; then
    aria2c -x16 "$URL" --seed-time=0 $@
  else
    print -P "%F{red}Not a valid URL!%f"
    return 1
 fi;
}

function serve(){
  servefile "$(ls | fzy)";
}

##Dynamically Update prompt
#TMOUT=5
#TRAPALRM() {
#    zle reset-prompt
#}

# This is for the mi lights
function yeet() { (workon life && yeecli $@ && deactivate ) }

function adb-mirror() {
    ADB=$HOME/Documents/tools/platform-tools_r31.0.3-linux/platform-tools/adb && $ADB connect 192.168.1.8:$1 && ADB=$ADB scrcpy
}


function teleconnect() {
  telepresence_context_switch="$(kubectx | fzf)"
  if [[ ! -z "$telepresence_context_switch" ]]; then
    telepresence quit && telepresence connect --context "${telepresence_context_switch}"
  fi;
}

function linguist() {
  _linguist_source_location=$1
  docker run -v "${_linguist_source_location:-$PWD}":/code:ro --rm github-linguist github-linguist /code
}
function get_docker_host() {
  echo "$(docker context inspect  $(docker context show) | jq -r '.[].Endpoints.docker.Host')";
}

# https://github.com/nektos/act/wiki/Custom-container-engine
function act() {
  DOCKER_HOST="$(get_docker_host)" \
  gh act $@;
}

function ssh-ec2() {
  if [[ -z $2 ]]; then
    echo 'You must specify the instance user and instance name!'
    return 1
  fi

  name=$2

  instance=$(aws ec2 describe-instances --output=text --query 'Reservations[*].Instances[*].[InstanceId]' --filters "Name=tag:Name,Values=$name")

  if [[ -z $instance ]]; then
    echo "Instance $name not found!"
    return 1
  fi

  # aws-ssm-ec2-proxy-command.sh will take care of the rest
  ssh "$1@$instance";

}


function for_all_gomod() {
  GNU_FIND_CMD='find'
  isMac && GNU_FIND_CMD='gfind'
  $GNU_FIND_CMD -name go.mod -exec zsh -c 'cd $(dirname {}) && echo {} && '"$*" \;
}
